#!/usr/bin/env python3

"""
Development Environment Monitor.
Continuously monitors environment health and status.
"""

import argparse
from datetime import datetime
import json
import os
from pathlib import Path
import signal
import subprocess
import sys
import time
from typing import Dict, List, Optional

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
BOLD = '\033[1m'
NC = '\033[0m'

class EnvironmentMonitor:
    """Monitors development environment health and status."""

    def __init__(self, interval: int = 300, history_size: int = 100):
        self.interval = interval  # seconds between checks
        self.history_size = history_size
        self.monitor_dir = Path("monitor_data")
        self.monitor_dir.mkdir(exist_ok=True)
        self.history_file = self.monitor_dir / "monitor_history.json"
        self.status_file = self.monitor_dir / "current_status.json"
        self.load_history()
        self.running = True

    def load_history(self):
        """Load monitoring history."""
        if self.history_file.exists():
            try:
                self.history = json.loads(self.history_file.read_text())
            except:
                self.history = []
        else:
            self.history = []

    def save_history(self):
        """Save monitoring history."""
        while len(self.history) > self.history_size:
            self.history.pop(0)
        self.history_file.write_text(json.dumps(self.history))

    def run_command(self, cmd: str) -> tuple[bool, str]:
        """Run a shell command."""
        try:
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True,
                check=True,
                timeout=30
            )
            return True, result.stdout.strip()
        except Exception as e:
            return False, str(e)

    def check_environment(self) -> Dict:
        """Check environment status."""
        status = {
            "timestamp": datetime.now().isoformat(),
            "checks": {}
        }

        # Python version check
        python_version = sys.version.split()[0]
        status["checks"]["python_version"] = {
            "status": "ok" if python_version.startswith("3.11") else "error",
            "value": python_version,
            "message": "Correct Python version" if python_version.startswith("3.11") else "Wrong Python version"
        }

        # Virtual environment check
        venv = os.environ.get("VIRTUAL_ENV")
        status["checks"]["virtual_env"] = {
            "status": "ok" if venv else "error",
            "value": venv or "Not activated",
            "message": "Virtual environment active" if venv else "Virtual environment not activated"
        }

        # Dependencies check
        success, output = self.run_command("pip check")
        status["checks"]["dependencies"] = {
            "status": "ok" if success else "error",
            "value": "All dependencies satisfied" if success else output,
            "message": "Dependencies OK" if success else "Dependency issues found"
        }

        # Disk space check
        success, output = self.run_command("df -h .")
        if success:
            usage = output.split('\n')[1].split()[4].rstrip('%')
            status["checks"]["disk_space"] = {
                "status": "ok" if int(usage) < 90 else "warning",
                "value": f"{usage}% used",
                "message": "Disk space OK" if int(usage) < 90 else "Disk space low"
            }

        # Environment size check
        venv_size = sum(f.stat().st_size for f in Path('.venv').rglob('*') if f.is_file()) if Path('.venv').exists() else 0
        status["checks"]["env_size"] = {
            "status": "ok" if venv_size < 1e9 else "warning",  # Warning if over 1GB
            "value": f"{venv_size / 1e6:.1f} MB",
            "message": "Environment size OK" if venv_size < 1e9 else "Environment size large"
        }

        return status

    def update_status(self, status: Dict):
        """Update current status and history."""
        self.status_file.write_text(json.dumps(status, indent=2))
        self.history.append(status)
        self.save_history()

    def print_status(self, status: Dict):
        """Print current status to console."""
        os.system('clear' if os.name == 'posix' else 'cls')
        print(f"\n{BOLD}{BLUE}Development Environment Monitor{NC}")
        print(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Monitoring interval: {self.interval} seconds\n")

        for check_name, check in status["checks"].items():
            color = GREEN if check["status"] == "ok" else (YELLOW if check["status"] == "warning" else RED)
            print(f"{BOLD}{check_name}:{NC}")
            print(f"Status: {color}{check['status'].upper()}{NC}")
            print(f"Value: {check['value']}")
            print(f"Message: {check['message']}\n")

    def generate_report(self) -> str:
        """Generate HTML report from history."""
        report_path = self.monitor_dir / f"monitor_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Environment Monitor Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .ok {{ color: green; }}
                .warning {{ color: orange; }}
                .error {{ color: red; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f8f9fa; }}
            </style>
        </head>
        <body>
            <h1>Environment Monitor Report</h1>
            <p>Generated: {datetime.now().isoformat()}</p>
            
            <h2>Latest Status</h2>
            <table>
                <tr>
                    <th>Check</th>
                    <th>Status</th>
                    <th>Value</th>
                    <th>Message</th>
                </tr>
        """

        if self.history:
            latest = self.history[-1]
            for check_name, check in latest["checks"].items():
                html_content += f"""
                <tr>
                    <td>{check_name}</td>
                    <td class="{check['status']}">{check['status'].upper()}</td>
                    <td>{check['value']}</td>
                    <td>{check['message']}</td>
                </tr>
                """

        html_content += """
            </table>
            
            <h2>History</h2>
            <p>Last 10 status changes:</p>
            <table>
                <tr>
                    <th>Time</th>
                    <th>Status Changes</th>
                </tr>
        """

        # Add last 10 status changes
        for status in reversed(self.history[-10:]):
            changes = [
                f"{check_name}: {check['status'].upper()}"
                for check_name, check in status["checks"].items()
                if check['status'] != 'ok'
            ]
            html_content += f"""
            <tr>
                <td>{status['timestamp']}</td>
                <td>{', '.join(changes) if changes else 'All OK'}</td>
            </tr>
            """

        html_content += """
            </table>
        </body>
        </html>
        """

        report_path.write_text(html_content)
        return str(report_path)

    def monitor(self):
        """Run continuous monitoring."""
        def signal_handler(signum, frame):
            print(f"\n{YELLOW}Stopping monitor...{NC}")
            self.running = False

        signal.signal(signal.SIGINT, signal_handler)

        print(f"{BLUE}Starting environment monitor...{NC}")
        print("Press Ctrl+C to stop")

        while self.running:
            status = self.check_environment()
            self.update_status(status)
            self.print_status(status)
            
            # Generate report if there are issues
            if any(check["status"] != "ok" for check in status["checks"].values()):
                report_path = self.generate_report()
                print(f"{YELLOW}Issues detected! Report generated: {report_path}{NC}")
            
            time.sleep(self.interval)

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Monitor development environment")
    parser.add_argument("--interval", type=int, default=300,
                       help="Monitoring interval in seconds (default: 300)")
    parser.add_argument("--history-size", type=int, default=100,
                       help="Number of historical entries to keep (default: 100)")
    args = parser.parse_args()

    monitor = EnvironmentMonitor(args.interval, args.history_size)
    monitor.monitor()

if __name__ == "__main__":
    main()
