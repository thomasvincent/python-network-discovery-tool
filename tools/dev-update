#!/usr/bin/env python3

"""
Development Environment Update Tool.
Keeps all development tools and configurations up-to-date.
"""

import os
import shutil
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
BOLD = '\033[1m'
NC = '\033[0m'

class EnvironmentUpdater:
    """Updates development environment tools and configurations."""

    def __init__(self, backup: bool = True):
        self.root_dir = Path.cwd()
        self.tools_dir = self.root_dir / "tools"
        self.backup = backup
        self.required_python_version = "3.11"

    def run_command(self, cmd: str, check: bool = True) -> tuple[bool, str]:
        """Run a shell command."""
        try:
            result = subprocess.run(
                cmd,
                shell=True,
                check=check,
                capture_output=True,
                text=True
            )
            return True, result.stdout.strip()
        except subprocess.CalledProcessError as e:
            return False, e.stderr.strip()

    def create_backup(self):
        """Create backup of current environment."""
        if not self.backup:
            return

        print(f"{BLUE}Creating environment backup...{NC}")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_dir = self.root_dir / f"env_backup_{timestamp}"

        # Backup tools
        if self.tools_dir.exists():
            shutil.copytree(self.tools_dir, backup_dir / "tools")

        # Backup configurations
        for config_file in [".git/hooks/pre-commit", ".git/hooks/pre-push", "env_config.json"]:
            src = self.root_dir / config_file
            if src.exists():
                dst = backup_dir / config_file
                dst.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(src, dst)

        print(f"{GREEN}Backup created at: {backup_dir}{NC}")

    def verify_tools_directory(self):
        """Ensure tools directory exists and is properly structured."""
        print(f"{BLUE}Verifying tools directory...{NC}")
        self.tools_dir.mkdir(exist_ok=True)
        
        # List of expected tools
        expected_tools = [
            "dev-init",
            "dev-update",
            "dev-validate",
            "dev-monitor",
            "dev-snapshot",
            "dev-snapshot-diff",
            "dev-snapshot-report",
            "dev-troubleshoot",
            "dev-reset",
            "dev-hub"
        ]

        # Ensure all tools exist and are executable
        for tool in expected_tools:
            tool_path = self.tools_dir / tool
            if not tool_path.exists():
                print(f"{YELLOW}Tool missing: {tool}, checking root directory...{NC}")
                root_tool = self.root_dir / tool
                if root_tool.exists() and root_tool.is_file():
                    shutil.copy2(root_tool, tool_path)
                    print(f"Copied {tool} to tools directory")
            if tool_path.exists():
                tool_path.chmod(0o755)

        return True

    def update_symlinks(self):
        """Update tool symbolic links."""
        print(f"{BLUE}Updating tool symbolic links...{NC}")
        
        # Remove existing symlinks in root directory
        for link in self.root_dir.glob("dev-*"):
            if link.is_symlink():
                link.unlink()

        # Create new symlinks
        for tool in self.tools_dir.glob("dev-*"):
            link_path = self.root_dir / tool.name
            try:
                link_path.symlink_to(tool)
                tool.chmod(0o755)
                print(f"Updated link: {tool.name}")
            except Exception as e:
                print(f"{RED}Failed to create link for {tool.name}: {e}{NC}")
                return False

        return True

    def update_git_hooks(self):
        """Update Git hooks."""
        print(f"{BLUE}Updating Git hooks...{NC}")
        
        hooks_dir = self.root_dir / ".git" / "hooks"
        if not hooks_dir.exists():
            print(f"{YELLOW}Git hooks directory not found. Initializing Git...{NC}")
            success, _ = self.run_command("git init")
            if not success:
                print(f"{RED}Failed to initialize Git{NC}")
                return False

        hooks_dir.mkdir(exist_ok=True)

        # Update pre-commit hook
        pre_commit = hooks_dir / "pre-commit"
        with open(pre_commit, 'w') as f:
            f.write('''#!/bin/bash
# Pre-commit hook for development environment verification

# Colors
RED='\\033[0;31m'
GREEN='\\033[0;32m'
NC='\\033[0m'

echo "Running pre-commit checks..."

# Verify Python version
python_version=$(python --version 2>&1)
if [[ ! $python_version =~ ^Python\ 3\.11\.[0-9]+$ ]]; then
    echo -e "${RED}Error: Wrong Python version: $python_version${NC}"
    exit 1
fi

# Run environment validation
./dev-validate || exit 1

# Run tests
pytest || exit 1

# Run code quality checks
black --check src tests || exit 1
mypy src || exit 1

echo -e "${GREEN}All checks passed!${NC}"
exit 0
''')
        pre_commit.chmod(0o755)

        # Update pre-push hook
        pre_push = hooks_dir / "pre-push"
        with open(pre_push, 'w') as f:
            f.write('''#!/bin/bash
# Pre-push hook for comprehensive checks

# Colors
RED='\\033[0;31m'
GREEN='\\033[0;32m'
NC='\\033[0m'

echo "Running pre-push checks..."

# Create pre-push snapshot
./dev-snapshot create pre-push-$(date +%Y%m%d_%H%M%S)

# Run full validation with report
./dev-validate --report || exit 1

# Run comprehensive tests
pytest --cov=src --cov-report=term-missing || exit 1

echo -e "${GREEN}All checks passed!${NC}"
exit 0
''')
        pre_push.chmod(0o755)

        print(f"{GREEN}Git hooks updated{NC}")
        return True

    def update_dependencies(self):
        """Update project dependencies."""
        print(f"{BLUE}Updating dependencies...{NC}")
        
        venv_dir = self.root_dir / ".venv"
        if not venv_dir.exists():
            print(f"{RED}Virtual environment not found{NC}")
            return False

        pip_path = venv_dir / "bin" / "pip"
        
        # Upgrade pip
        success, _ = self.run_command(f"{pip_path} install --upgrade pip")
        if not success:
            print(f"{RED}Failed to upgrade pip{NC}")
            return False

        # Upgrade project dependencies
        success, _ = self.run_command(f"{pip_path} install --upgrade -e .")
        if not success:
            print(f"{RED}Failed to upgrade project dependencies{NC}")
            return False

        print(f"{GREEN}Dependencies updated{NC}")
        return True

    def update(self):
        """Run complete update process."""
        print(f"\n{BOLD}{BLUE}Updating Development Environment{NC}")
        print(f"Python version: {sys.version.split()[0]}")

        if not sys.version.startswith(self.required_python_version):
            print(f"{RED}Error: Python {self.required_python_version}.x required{NC}")
            return False

        # Create backup if enabled
        if self.backup:
            self.create_backup()

        # Update steps
        steps = [
            (self.verify_tools_directory, "Verifying tools directory"),
            (self.update_symlinks, "Updating tool links"),
            (self.update_git_hooks, "Updating Git hooks"),
            (self.update_dependencies, "Updating dependencies")
        ]

        for step_func, description in steps:
            print(f"\n{YELLOW}{description}...{NC}")
            if not step_func():
                print(f"{RED}Update failed during: {description}{NC}")
                return False

        print(f"\n{GREEN}Environment update complete!{NC}")
        print("\nTo verify the update, run:")
        print(f"{YELLOW}./dev-validate --report{NC}")
        return True

def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Update development environment")
    parser.add_argument("--no-backup", action="store_true",
                       help="Skip environment backup")
    args = parser.parse_args()

    updater = EnvironmentUpdater(backup=not args.no_backup)
    success = updater.update()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
