#!/usr/bin/env python3

"""
Development Environment Reset Tool.
Provides clean environment initialization and reset functionality.
"""

import argparse
import os
from pathlib import Path
import shutil
import subprocess
import sys
from typing import List, Tuple

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
BOLD = '\033[1m'
NC = '\033[0m'

class DevReset:
    """Handles development environment reset operations."""
    
    def __init__(self, force: bool = False, backup: bool = True):
        self.force = force
        self.backup = backup
        self.python_version = "3.11"
        self.venv_path = Path(".venv")
        self.backup_dir = Path("backup_env")
        
    def run_command(self, cmd: str, capture_output: bool = True) -> Tuple[bool, str]:
        """Run a shell command."""
        try:
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=capture_output,
                text=True,
                check=True
            )
            return True, result.stdout.strip() if capture_output else ""
        except subprocess.CalledProcessError as e:
            return False, e.stderr.strip() if capture_output else str(e)

    def check_python_version(self) -> bool:
        """Check if correct Python version is available."""
        version = sys.version_info
        return version.major == 3 and version.minor == 11

    def backup_environment(self) -> bool:
        """Backup current environment if it exists."""
        if not self.backup or not self.venv_path.exists():
            return True

        try:
            timestamp = subprocess.check_output(
                ['date', '+%Y%m%d_%H%M%S']
            ).decode().strip()
            backup_path = self.backup_dir / f"venv_backup_{timestamp}"
            
            print(f"{YELLOW}Backing up current environment...{NC}")
            if self.backup_dir.exists():
                # Keep only last 5 backups
                backups = sorted(self.backup_dir.glob("venv_backup_*"))
                while len(backups) >= 5:
                    shutil.rmtree(backups[0])
                    backups = backups[1:]
            
            self.backup_dir.mkdir(exist_ok=True)
            shutil.copytree(self.venv_path, backup_path)
            return True
        except Exception as e:
            print(f"{RED}Backup failed: {e}{NC}")
            return False

    def clean_environment(self) -> bool:
        """Clean up development environment."""
        try:
            # Remove virtual environment
            if self.venv_path.exists():
                shutil.rmtree(self.venv_path)
            
            # Clean up cache directories
            cache_dirs = [
                "__pycache__",
                ".pytest_cache",
                ".mypy_cache",
                ".coverage",
                "dist",
                "build",
                "*.egg-info",
            ]
            
            print(f"{YELLOW}Cleaning up cache directories...{NC}")
            for pattern in cache_dirs:
                for path in Path().rglob(pattern):
                    if path.is_dir():
                        shutil.rmtree(path)
                    else:
                        path.unlink()
            
            return True
        except Exception as e:
            print(f"{RED}Cleanup failed: {e}{NC}")
            return False

    def setup_virtual_environment(self) -> bool:
        """Set up new virtual environment."""
        try:
            print(f"{YELLOW}Creating new virtual environment...{NC}")
            success, _ = self.run_command(f"python -m venv {self.venv_path}")
            if not success:
                return False
            
            # Upgrade pip
            pip_path = self.venv_path / "bin" / "pip"
            success, _ = self.run_command(f"{pip_path} install --upgrade pip")
            if not success:
                return False
            
            return True
        except Exception as e:
            print(f"{RED}Virtual environment setup failed: {e}{NC}")
            return False

    def install_dependencies(self) -> bool:
        """Install project dependencies."""
        try:
            pip_path = self.venv_path / "bin" / "pip"
            
            print(f"{YELLOW}Installing project dependencies...{NC}")
            success, _ = self.run_command(f"{pip_path} install -e .")
            if not success:
                return False
            
            print(f"{YELLOW}Installing development dependencies...{NC}")
            if Path("requirements-dev.txt").exists():
                success, _ = self.run_command(f"{pip_path} install -r requirements-dev.txt")
                if not success:
                    return False
            
            return True
        except Exception as e:
            print(f"{RED}Dependency installation failed: {e}{NC}")
            return False

    def verify_installation(self) -> bool:
        """Verify the new environment."""
        try:
            print(f"{YELLOW}Verifying installation...{NC}")
            success, _ = self.run_command("./verify_env.sh", capture_output=False)
            return success
        except Exception as e:
            print(f"{RED}Verification failed: {e}{NC}")
            return False

    def reset(self) -> bool:
        """Perform the complete reset process."""
        if not self.check_python_version():
            print(f"{RED}Error: Requires Python {self.python_version}{NC}")
            print(f"Current: Python {sys.version.split()[0]}")
            return False

        steps = [
            (self.backup_environment, "Backing up environment"),
            (self.clean_environment, "Cleaning environment"),
            (self.setup_virtual_environment, "Setting up virtual environment"),
            (self.install_dependencies, "Installing dependencies"),
            (self.verify_installation, "Verifying installation")
        ]

        for step_func, description in steps:
            print(f"\n{BLUE}=== {description} ==={NC}")
            if not step_func():
                if not self.force:
                    return False
                print(f"{YELLOW}Continuing despite error (force mode)...{NC}")

        print(f"\n{GREEN}Environment reset complete!{NC}")
        print(f"\nTo activate the new environment, run:")
        print(f"{YELLOW}source .venv/bin/activate{NC}")
        return True

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Reset development environment")
    parser.add_argument("--force", action="store_true", help="Continue despite errors")
    parser.add_argument("--no-backup", action="store_true", help="Skip environment backup")
    args = parser.parse_args()

    resetter = DevReset(force=args.force, backup=not args.no_backup)
    success = resetter.reset()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
