#!/usr/bin/env python3

"""
Development Environment Snapshot Tool.
Manages environment snapshots for different configurations.
"""

import argparse
import json
import os
import shutil
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
BOLD = '\033[1m'
NC = '\033[0m'

class EnvironmentSnapshot:
    """Manages development environment snapshots."""
    
    def __init__(self):
        self.snapshot_dir = Path("env_snapshots")
        self.snapshot_dir.mkdir(exist_ok=True)
        self.metadata_file = self.snapshot_dir / "snapshots.json"
        self.venv_path = Path(".venv")
        self.metadata = self.load_metadata()

    def load_metadata(self) -> Dict:
        """Load snapshot metadata."""
        if self.metadata_file.exists():
            return json.loads(self.metadata_file.read_text())
        return {"snapshots": {}}

    def save_metadata(self):
        """Save snapshot metadata."""
        self.metadata_file.write_text(json.dumps(self.metadata, indent=2))

    def get_environment_info(self) -> Dict:
        """Get current environment information."""
        info = {
            "python_version": sys.version.split()[0],
            "pip_version": subprocess.check_output(
                [".venv/bin/pip", "--version"]
            ).decode().split()[1],
            "timestamp": datetime.now().isoformat(),
            "packages": []
        }
        
        # Get installed packages
        result = subprocess.run(
            [".venv/bin/pip", "freeze"],
            capture_output=True,
            text=True
        )
        info["packages"] = result.stdout.splitlines()
        
        return info

    def create_snapshot(self, name: str, description: str = "") -> bool:
        """Create a new environment snapshot."""
        if not self.venv_path.exists():
            print(f"{RED}Error: No virtual environment found at {self.venv_path}{NC}")
            return False

        snapshot_path = self.snapshot_dir / name
        if snapshot_path.exists():
            print(f"{RED}Error: Snapshot '{name}' already exists{NC}")
            return False

        try:
            print(f"{YELLOW}Creating snapshot '{name}'...{NC}")
            
            # Copy virtual environment
            shutil.copytree(self.venv_path, snapshot_path)
            
            # Save metadata
            self.metadata["snapshots"][name] = {
                "description": description,
                "info": self.get_environment_info(),
                "path": str(snapshot_path)
            }
            self.save_metadata()
            
            print(f"{GREEN}Snapshot created successfully!{NC}")
            return True
        except Exception as e:
            print(f"{RED}Error creating snapshot: {e}{NC}")
            if snapshot_path.exists():
                shutil.rmtree(snapshot_path)
            return False

    def restore_snapshot(self, name: str, force: bool = False) -> bool:
        """Restore environment from a snapshot."""
        if name not in self.metadata["snapshots"]:
            print(f"{RED}Error: Snapshot '{name}' not found{NC}")
            return False

        snapshot_path = Path(self.metadata["snapshots"][name]["path"])
        if not snapshot_path.exists():
            print(f"{RED}Error: Snapshot files not found{NC}")
            return False

        try:
            if self.venv_path.exists():
                if not force:
                    response = input(f"{YELLOW}Current environment will be replaced. Continue? (y/N) {NC}")
                    if response.lower() != 'y':
                        return False
                shutil.rmtree(self.venv_path)

            print(f"{YELLOW}Restoring snapshot '{name}'...{NC}")
            shutil.copytree(snapshot_path, self.venv_path)
            
            # Verify restoration
            success, _ = subprocess.run(
                ["./verify_env.sh"],
                capture_output=True
            ).returncode == 0
            
            if success:
                print(f"{GREEN}Snapshot restored successfully!{NC}")
                print(f"\nTo activate the restored environment, run:")
                print(f"{YELLOW}source .venv/bin/activate{NC}")
            else:
                print(f"{RED}Warning: Verification failed after restore{NC}")
            
            return success
        except Exception as e:
            print(f"{RED}Error restoring snapshot: {e}{NC}")
            return False

    def list_snapshots(self):
        """List available snapshots."""
        if not self.metadata["snapshots"]:
            print(f"{YELLOW}No snapshots available{NC}")
            return

        print(f"\n{BLUE}Available Snapshots:{NC}")
        for name, data in self.metadata["snapshots"].items():
            info = data["info"]
            print(f"\n{BOLD}{name}{NC}")
            print(f"  Description: {data['description']}")
            print(f"  Python: {info['python_version']}")
            print(f"  Created: {info['timestamp']}")
            print(f"  Packages: {len(info['packages'])}")

    def delete_snapshot(self, name: str, force: bool = False) -> bool:
        """Delete a snapshot."""
        if name not in self.metadata["snapshots"]:
            print(f"{RED}Error: Snapshot '{name}' not found{NC}")
            return False

        if not force:
            response = input(f"{YELLOW}Delete snapshot '{name}'? (y/N) {NC}")
            if response.lower() != 'y':
                return False

        try:
            snapshot_path = Path(self.metadata["snapshots"][name]["path"])
            if snapshot_path.exists():
                shutil.rmtree(snapshot_path)
            
            del self.metadata["snapshots"][name]
            self.save_metadata()
            
            print(f"{GREEN}Snapshot '{name}' deleted successfully{NC}")
            return True
        except Exception as e:
            print(f"{RED}Error deleting snapshot: {e}{NC}")
            return False

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Manage development environment snapshots")
    subparsers = parser.add_subparsers(dest="command", help="Command to execute")

    # Create snapshot
    create_parser = subparsers.add_parser("create", help="Create new snapshot")
    create_parser.add_argument("name", help="Snapshot name")
    create_parser.add_argument("-d", "--description", help="Snapshot description")

    # Restore snapshot
    restore_parser = subparsers.add_parser("restore", help="Restore snapshot")
    restore_parser.add_argument("name", help="Snapshot name")
    restore_parser.add_argument("-f", "--force", action="store_true", help="Force restore")

    # List snapshots
    subparsers.add_parser("list", help="List available snapshots")

    # Delete snapshot
    delete_parser = subparsers.add_parser("delete", help="Delete snapshot")
    delete_parser.add_argument("name", help="Snapshot name")
    delete_parser.add_argument("-f", "--force", action="store_true", help="Force delete")

    args = parser.parse_args()
    snapshot = EnvironmentSnapshot()

    if args.command == "create":
        success = snapshot.create_snapshot(args.name, args.description or "")
    elif args.command == "restore":
        success = snapshot.restore_snapshot(args.name, args.force)
    elif args.command == "list":
        snapshot.list_snapshots()
        success = True
    elif args.command == "delete":
        success = snapshot.delete_snapshot(args.name, args.force)
    else:
        parser.print_help()
        success = False

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
