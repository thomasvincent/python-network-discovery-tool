#!/usr/bin/env python3

"""
Development workflow automation script.
Provides common workflow sequences and task automation.
"""

import argparse
from datetime import datetime
import os
import subprocess
import sys

# ANSI colors
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
RED = '\033[0;31m'
BLUE = '\033[0;34m'
NC = '\033[0m'

def run_command(cmd, check=True, capture_output=True):
    """Run a command and return its success status and output."""
    try:
        result = subprocess.run(
            cmd,
            shell=isinstance(cmd, str),
            check=check,
            capture_output=capture_output,
            text=True
        )
        return True, result.stdout if capture_output else ""
    except subprocess.CalledProcessError as e:
        return False, e.stderr if capture_output else str(e)

def ensure_venv():
    """Ensure we're running in the virtual environment."""
    if not os.environ.get("VIRTUAL_ENV"):
        print(f"{RED}Error: Virtual environment not activated{NC}")
        print(f"Please run: {YELLOW}source .venv/bin/activate{NC}")
        sys.exit(1)

def workflow_start_feature(args):
    """Start a new feature workflow."""
    print(f"{BLUE}Starting new feature: {args.name}{NC}")
    
    # Create feature branch
    branch_name = f"feature/{args.name}"
    run_command(f"git checkout -b {branch_name}")
    
    # Run environment checks
    print(f"{YELLOW}Verifying environment...{NC}")
    run_command("./verify_env.sh", capture_output=False)
    
    # Create feature documentation stub
    docs_path = f"docs/features/{args.name}.md"
    os.makedirs(os.path.dirname(docs_path), exist_ok=True)
    with open(docs_path, 'w') as f:
        f.write(f"# {args.name.title()}\n\n## Overview\n\n## Implementation\n\n## Testing\n")
    
    print(f"{GREEN}Feature setup complete!{NC}")
    print(f"Next steps:")
    print(f"1. Edit {docs_path}")
    print(f"2. Implement feature in src/")
    print(f"3. Add tests in tests/")
    print(f"4. Run {YELLOW}./dev-workflow check{NC} before committing")

def workflow_check(args):
    """Run comprehensive checks before commit."""
    print(f"{YELLOW}Running pre-commit checks...{NC}")
    
    # Format code
    print("Formatting code...")
    success, _ = run_command("make format", check=False, capture_output=False)
    if not success:
        print(f"{RED}Code formatting failed{NC}")
        return False

    # Type checking
    print("Running type checks...")
    success, _ = run_command("make type-check", check=False, capture_output=False)
    if not success:
        print(f"{RED}Type checking failed{NC}")
        return False

    # Run tests
    print("Running tests...")
    success, _ = run_command("make test", check=False, capture_output=False)
    if not success:
        print(f"{RED}Tests failed{NC}")
        return False

    print(f"{GREEN}All checks passed!{NC}")
    return True

def workflow_finish_feature(args):
    """Complete a feature workflow."""
    # Get current branch
    success, branch = run_command("git branch --show-current")
    if not success or not branch.startswith("feature/"):
        print(f"{RED}Error: Not on a feature branch{NC}")
        return False

    # Run checks
    if not workflow_check(args):
        print(f"{RED}Feature not ready to finish - checks failed{NC}")
        return False

    # Update documentation
    feature_name = branch.split("/")[1]
    docs_path = f"docs/features/{feature_name}.md"
    if os.path.exists(docs_path):
        print(f"{YELLOW}Don't forget to update {docs_path}{NC}")

    print(f"{GREEN}Feature ready to commit!{NC}")
    print("Next steps:")
    print("1. Review changes: git diff")
    print("2. Stage changes: git add .")
    print("3. Commit: git commit -m 'feat: description'")
    print("4. Push: git push origin " + branch)
    return True

def workflow_daily_start(args):
    """Start daily development workflow."""
    print(f"{YELLOW}Starting daily development setup...{NC}")
    
    # Pull latest changes
    run_command("git pull")
    
    # Verify environment
    run_command("./verify_env.sh", capture_output=False)
    
    # Start documentation server if requested
    if args.docs:
        subprocess.Popen(["make", "docs-serve"])
    
    print(f"{GREEN}Development environment ready!{NC}")
    print("Quick commands:")
    print("- make quick-test  : Run fast tests")
    print("- make quick-lint  : Quick lint check")
    print("- ./dev-dashboard  : Show status dashboard")

def main():
    """Main entry point."""
    ensure_venv()

    parser = argparse.ArgumentParser(description="Development workflow automation")
    subparsers = parser.add_subparsers(dest="command", help="Workflow command")

    # Start feature workflow
    feature_parser = subparsers.add_parser("start-feature", help="Start new feature")
    feature_parser.add_argument("name", help="Feature name")

    # Check workflow
    subparsers.add_parser("check", help="Run all checks")

    # Finish feature workflow
    subparsers.add_parser("finish-feature", help="Complete feature")

    # Daily start workflow
    daily_parser = subparsers.add_parser("daily-start", help="Start daily development")
    daily_parser.add_argument("--docs", action="store_true", help="Start docs server")

    args = parser.parse_args()

    if args.command == "start-feature":
        workflow_start_feature(args)
    elif args.command == "check":
        workflow_check(args)
    elif args.command == "finish-feature":
        workflow_finish_feature(args)
    elif args.command == "daily-start":
        workflow_daily_start(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
